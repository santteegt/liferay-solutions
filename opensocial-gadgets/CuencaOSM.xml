<?xml version="1.0" encoding="UTF-8" ?>

<Module>
  <ModulePrefs title="Parroquias Cuenca" height="400">
    <Require feature="pubsub-2">
      <Param name="topics">
        <![CDATA[
        <Topic title="MapaCuenca" name="com.etapa.mapa.parroquias" publish="true"/>
        ]]>
      </Param>
    </Require>
    <Require feature="pubsub-2">
      <Param name="topics">
        <![CDATA[
        <Topic title="BonitaPortlet" name="com.etapa.mapa.bonita" suscribe="true"/>
        ]]>
      </Param>
    </Require>
    <Require feature="dynamic-height" />
  </ModulePrefs>
  <!-- Gadget para publicar información geográfica de comunidades y parroquias rurales del Canton Cuenca haciendo uso de layers exclusivos y extraccion de la informacion correcpondiente a ser enviada a un Portlet
    Autor: Santiago Gonzalez
    -->
  <Content type="html">
    <![CDATA[
        <link rel="stylesheet" href="/html/js/openlayers/theme/default/style.css">
      <link href="http://cdn.alloyui.com/2.0.0/aui-css/css/bootstrap.min.css"
      rel="stylesheet">
      <div id="loadingMsg"></div>
    <div id="container" style="position:relative">
        <!-- <div style="position:absolute; top:0; right:0; width:25%">
            <label for="parroquia">Parroquia</label>
            <input name="parroquia" id="parroquia" type="text" readonly="readonly">
        </div> -->
        <div id="map" style="width:100%;"></div>

        
    </div>
        <script src="http://cdn.alloyui.com/2.0.0/aui/aui-min.js"></script>
        <script src="http://openlayers.org/api/OpenLayers.js"></script>
        <script src="http://maps.google.com/maps/api/js?v=3&amp;sensor=false" style=""></script>

        <script type="text/javascript">
        var callback; //callback a servicio bonita Portlet
        gadgets.HubSettings.onConnect = function(hub, suc, err) {
            gadgets.Hub.subscribe("com.etapa.mapa.bonita", callback);
            console.log('Mapa Suscrito a Bonita Portlet');
        };
        
        
        YUI().use('aui-node', function(Y) {
            
            OpenLayers.ImgPath = "/html/js/openlayers/img/";
            /*var lat=-2.899800;
            var lon=-79.009529;*/
            var lat=-2.896067;
            var lon=-78.997563;
            var zoom=9;
            var map;
 
                map = new OpenLayers.Map ("map", {
                controls:[
                    new OpenLayers.Control.Navigation(),
                    new OpenLayers.Control.PanZoomBar(),
                    //new OpenLayers.Control.LayerSwitcher(),
                    new OpenLayers.Control.Attribution(),
                    new OpenLayers.Control.ScaleLine(),
                    new OpenLayers.Control.MousePosition(),
                    new OpenLayers.Control.KeyboardDefaults()
                    /*new OpenLayers.Control.TouchNavigation({
                        dragPanOptions: {
                            enableKinetic: true
                        }
                    }),*/
                    //new OpenLayers.Control.Zoom(),
                    ],
                    /*maxExtent: new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34),
                    maxResolution: 156543.0399,*/
                    numZoomLevels: 10,
                    units: 'm',
                    projection: new OpenLayers.Projection("EPSG:900913"),
                    displayProjection: new OpenLayers.Projection("EPSG:4326")
                } );
 
 
                map.addLayer(new OpenLayers.Layer.OSM("OpenStreetMap", null, {
                    transitionEffect: "resize",
                    attribution: "&copy; <a href='http://www.openstreetmap.org/copyright'>OpenStreetMap</a> contributors"}));
 
                var lonLat = new OpenLayers.LonLat(lon, lat).transform(new OpenLayers.Projection("EPSG:4326"), new OpenLayers.Projection("EPSG:900913"));
 
                map.setCenter (lonLat, zoom);
                
                
                //var gmap = new OpenLayers.Layer.Google("Google Streets");
 
        callback = function callback(topic, data, subscriberData) {
                console.log('Mensaje desde bonita Portlet a Mapa');
                /*debugger;
                YUI().use( 'aui-loading-mask', function(A){
                         if (A.one('#loadingMsg').loadingmask == null)
                        A.one('#tagid').plug(A.LoadingMask, { background: '#000' });
                            A.one('#loadingMsg').loadingmask.toggle();
                });*/
                //array de Layers añadidos
                var layersArray = [ ];
                
        
                //LAYER PARROQUIAS
                var layer = new OpenLayers.Layer.Vector("Parroquias Rurales", {
                    strategies: [new OpenLayers.Strategy.Fixed()],
                    protocol: new OpenLayers.Protocol.HTTP({
                        url: "/opensocial-portlet/parroquias-cuenca.osm",   //<-- relative or absolute URL to your .osm file
                        format: new OpenLayers.Format.OSM()
                    }),
                    projection: new OpenLayers.Projection("EPSG:4326")
                });
                
                //selecccion de feature del layer de parroquias
                layer.events.on({
                    'featureselected': function(feature) {
                        var dataM = {};
                        dataM.parroquia = feature.feature.attributes['DPA_DESPAR'];
                        dataM.comunidad = '';
                        //Y.one('#parroquia').attr('value', dataM);
                        gadgets.Hub.publish("com.etapa.mapa.parroquias", dataM);
                    },
                    'featureunselected': function(feature) {
                    }
                });
                layersArray.push(layer);
                

                 //LAYER COMUNIDADES
                var layerc = new OpenLayers.Layer.Vector("Comunidades", {
                    strategies: [new OpenLayers.Strategy.Fixed()],
                    protocol: new OpenLayers.Protocol.HTTP({
                        url: "/opensocial-portlet/mapacomunidades.osm",
                        format: new OpenLayers.Format.OSM()
                    }),
                    projection: new OpenLayers.Projection("EPSG:4326"),
                });
                
                //selecccion de feature del layer de comunidades
                layerc.events.on({
                    'featureselected': function(feature) {
                        var dataM = {};
                        dataM.parroquia = feature.feature.attributes['parroquia'];
                        dataM.comunidad = feature.feature.attributes['rec_com_ba'];
                        //Y.one('#parroquia').attr('value',message);
                        gadgets.Hub.publish("com.etapa.mapa.parroquias", dataM);
                    },
                    'featureunselected': function(feature) {
                    }
                });
                layerc.events.register('loadend', layerc, function() {
                    console.log('comunidades cargadas');
                });
                layersArray.push(layerc);
 
                map.addLayers(layersArray);
                for(idx in layersArray) {
                    layersArray[idx].setVisibility(false);
                    layersArray[idx].events.register("visibilitychanged", layer, layerChanged);
                
                }
                
                function layerChanged(layerEv) {
                    if (layerEv.object.visibility) {
                        for(idx in layersArray) {
                            layersArray[idx].setVisibility( layersArray[idx] === layerEv.object );
                        }
                    }
                }
                
                drawControls = {
                    /*point: new OpenLayers.Control.DrawFeature(
                        vectors, OpenLayers.Handler.Point
                    ),
                    line: new OpenLayers.Control.DrawFeature(
                        vectors, OpenLayers.Handler.Path
                    ),
                    polygon: new OpenLayers.Control.DrawFeature(
                        vectors, OpenLayers.Handler.Polygon
                    ),*/
                    selectP: new OpenLayers.Control.SelectFeature(
                        layer,
                        {
                            clickout: false, toggle: false,
                            multiple: false, hover: false,
                            toggleKey: "ctrlKey", // ctrl key removes from selection
                            multipleKey: "shiftKey", // shift key adds to selection
                            box: true
                        }
                    ),
                    selectC: new OpenLayers.Control.SelectFeature(
                        layerc,
                        {
                            clickout: false, toggle: false,
                            multiple: false, hover: false,
                            toggleKey: "ctrlKey", // ctrl key removes from selection
                            multipleKey: "shiftKey", // shift key adds to selection
                            box: true
                        }
                    ),
                    layerSwitcher: new OpenLayers.Control.LayerSwitcher()/*,
                    selecthover: new OpenLayers.Control.SelectFeature(
                        layer,
                        {
                            multiple: false, hover: true,
                            toggleKey: "ctrlKey", // ctrl key removes from selection
                            multipleKey: "shiftKey" // shift key adds to selection
                        }
                    )*/
                };
                    
                for(var key in drawControls) {
                	var control = drawControls[key];
                    map.addControl(control);
                    control.activate();
                }
        }
                
          gadgets.window.adjustHeight();
        //--end TODO  
        
        });
        </script>
    ]]>
  </Content>
</Module>